---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS in Action: chapter 10 (with backup)'
Parameters:
  KeyName:
    Description: Key Pair name
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: mykey
  EBSBackupVolumeSize:
    Description: 'The size of the EBS backup volume, in gibibytes (GiBs).'
    Type: Number
    Default: 5
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-47205e28'
    'eu-west-2':
      AMI: 'ami-ed100689'
    'eu-west-1':
      AMI: 'ami-d7b9a2b1'
    'ap-northeast-2':
      AMI: 'ami-e21cc38c'
    'ap-northeast-1':
      AMI: 'ami-3bd3c45c'
    'sa-east-1':
      AMI: 'ami-87dab1eb'
    'ca-central-1':
      AMI: 'ami-a7aa15c3'
    'ap-southeast-1':
      AMI: 'ami-77af2014'
    'ap-southeast-2':
      AMI: 'ami-10918173'
    'eu-central-1':
      AMI: 'ami-82be18ed'
    'us-east-1':
      AMI: 'ami-a4c7edb2'
    'us-east-2':
      AMI: 'ami-8a7859ef'
    'us-west-1':
      AMI: 'ami-327f5352'
    'us-west-2':
      AMI: 'ami-6df1e514'
Resources:
  ##########################################################################
  #                                                                        #
  #                       VPC with two public subnets                      #
  #                                                                        #
  ##########################################################################
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '172.31.0.0/16'
      EnableDnsHostnames: true
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '172.31.38.0/24'
      VpcId: !Ref VPC
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '172.31.37.0/24'
      VpcId: !Ref VPC
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  SubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable
  SubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable
  RouteToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetA
      NetworkAclId: !Ref NetworkAcl
  SubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetB
      NetworkAclId: !Ref NetworkAcl
  NetworkAclEntryIngress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryEgress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  ##########################################################################
  #                                                                        #
  #                          EFS related resources                         #
  #                                                                        #
  ##########################################################################
  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties: {}
  MountTargetClientSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'EFS Mount target client'
      VpcId: !Ref VPC
  MountTargetSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'EFS Mount target'
      SecurityGroupIngress:
      - FromPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref MountTargetClientSecurityGroup
        ToPort: 2049
      VpcId: !Ref VPC
  MountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
      - !Ref MountTargetSecurityGroup
      SubnetId: !Ref SubnetA
  MountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
      - !Ref MountTargetSecurityGroup
      SubnetId: !Ref SubnetB
  ##########################################################################
  #                                                                        #
  #                        EC2 instances for testing                       #
  #                                                                        #
  ##########################################################################
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'EC2 instance'
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId: !Ref VPC
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref Role
  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: ec2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 'ec2:CreateSnapshot'
            Resource: '*'
  EC2InstanceA:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        DeviceIndex: 0
        GroupSet:
        - !Ref EC2SecurityGroup
        - !Ref MountTargetClientSecurityGroup
        SubnetId: !Ref SubnetA
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          bash -ex <<TRY
            # wait until EFS file system is available
            while ! nc -z ${FileSystem}.efs.${AWS::Region}.amazonaws.com 2049; do sleep 10; done
            sleep 10

            # copy existing /home to /oldhome
            mkdir /oldhome
            cp -a /home/. /oldhome

            # mount EFS file system
            echo "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /home nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,_netdev 0 0" >> /etc/fstab
            mount -a 

            # copy /oldhome to new /home
            cp -a /oldhome/. /home
          TRY
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2InstanceA --region ${AWS::Region}

          # wait until EBS volume is attached
          while ! [ "`fdisk -l | grep '/dev/xvdf' | wc -l`" -ge "1" ]; do sleep 10; done

          # format EBS volume if needed
          if [[ "`file -s /dev/xvdf`" != *"ext4"* ]]; then mkfs -t ext4 /dev/xvdf; fi

          # mount EBS volume
          mkdir /mnt/backup
          echo "/dev/xvdf /mnt/backup ext4 defaults,nofail 0 2" >> /etc/fstab
          mount -a

          # install backup cron
          cat > /etc/cron.d/backup << EOF
          SHELL=/bin/bash
          PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
          MAILTO=root
          HOME=/
          */15 * * * * root rsync -av --delete /home/ /mnt/backup/ ; fsfreeze -f /mnt/backup/ ; aws --region ${AWS::Region} ec2 create-snapshot --volume-id ${EBSBackupVolumeA} --description "EFS backup" ; fsfreeze -u /mnt/backup/
          EOF
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    DependsOn:
    - VPCGatewayAttachment
    - MountTargetA
  EC2InstanceB:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        DeviceIndex: 0
        GroupSet:
        - !Ref EC2SecurityGroup
        - !Ref MountTargetClientSecurityGroup
        SubnetId: !Ref SubnetB
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          bash -ex <<TRY
            # wait until EFS file system is available
            while ! nc -z ${FileSystem}.efs.${AWS::Region}.amazonaws.com 2049; do sleep 10; done
            sleep 10

            # mount EFS file system
            echo "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /home nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,_netdev 0 0" >> /etc/fstab
            mount -a
          TRY
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2InstanceB --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    DependsOn: 
    - VPCGatewayAttachment
    - MountTargetB
  EBSBackupVolumeA:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt 'EC2InstanceA.AvailabilityZone'
      Size: !Ref EBSBackupVolumeSize
      VolumeType: gp2
  EBSBackupVolumeAttachmentA: 
    Type: 'AWS::EC2::VolumeAttachment'
    Properties:
      Device: '/dev/xvdf'
      InstanceId: !Ref EC2InstanceA
      VolumeId: !Ref EBSBackupVolumeA
Outputs:
  EC2InstanceAIPAddress:
    Value: !GetAtt 'EC2InstanceA.PublicIp'
    Description: 'EC2 Instance (AZ A) public IP address (connect via SSH as user ec2-user)'
  EC2InstanceBIPAddress:
    Value: !GetAtt 'EC2InstanceB.PublicIp'
    Description: 'EC2 Instance (AZ B) public IP address (connect via SSH as user ec2-user)'
