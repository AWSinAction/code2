---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS in Action: chapter 17 (URL2PNG)'
Parameters:
  KeyName:
    Description: 'Key Pair name'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: mykey
  ApplicationID:
    Description: 'A unique identifier for your application.'
    Type: String
    AllowedPattern: '[A-Za-z0-9\\-]+'
    ConstraintDescription: 'Only letters, digits or dash allowed.'
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-2ed19c41'
    'eu-west-3':
      AMI: 'ami-c8a017b5'
    'eu-west-2':
      AMI: 'ami-e3051987'
    'eu-west-1':
      AMI: 'ami-760aaa0f'
    'ap-northeast-2':
      AMI: 'ami-fc862292'
    'ap-northeast-1':
      AMI: 'ami-2803ac4e'
    'sa-east-1':
      AMI: 'ami-1678037a'
    'ca-central-1':
      AMI: 'ami-ef3b838b'
    'ap-southeast-1':
      AMI: 'ami-dd7935be'
    'ap-southeast-2':
      AMI: 'ami-1a668878'
    'eu-central-1':
      AMI: 'ami-e28d098d'
    'us-east-1':
      AMI: 'ami-6057e21a'
    'us-east-2':
      AMI: 'ami-aa1b34cf'
    'us-west-1':
      AMI: 'ami-1a033c7a'
    'us-west-2':
      AMI: 'ami-32d8124a'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '172.31.0.0/16'
      EnableDnsHostnames: true
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '172.31.38.0/24'
      VpcId: !Ref VPC
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '172.31.37.0/24'
      VpcId: !Ref VPC
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable
  RouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable
  RoutePublicNATToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetA
      NetworkAclId: !Ref NetworkAcl
  SubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetB
      NetworkAclId: !Ref NetworkAcl
  NetworkAclEntryIngress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryEgress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'url2png'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
  IamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: url2png
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: !Sub 'arn:aws:s3:::${ApplicationID}/*'
          - Effect: Allow
            Action: 'sqs:*'
            Resource: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${SQSQueue.QueueName}'
  IamInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref IamRole
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref ApplicationID
      WebsiteConfiguration:
        IndexDocument: 'index.html'
  SQSQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: url2png
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceMonitoring: false
      InstanceType: t2.micro
      SecurityGroups:
      - !Ref SecurityGroup
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref IamInstanceProfile
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          curl -sL https://rpm.nodesource.com/setup_8.x | bash -
          yum install -y nodejs
          wget -q -T 60 https://github.com/AWSinAction/code2/archive/master.zip
          unzip master.zip
          cd code2-master/chapter15/url2png/
          npm install
          echo "{\"QueueUrl\": \"${SQSQueue}\", \"Bucket\": \"${ApplicationID}\"}" > config.json
          node worker.js
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      VPCZoneIdentifier:
      - !Ref SubnetA
      - !Ref SubnetB
      Tags:
      - PropagateAtLaunch: true
        Value: 'url2png-consumer'
        Key: Name
    DependsOn: VPCGatewayAttachment
  ScalingUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: 'ChangeInCapacity'
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: 'StepScaling'
      MetricAggregationType: 'Average'
      EstimatedInstanceWarmup: 60
      StepAdjustments:
      - MetricIntervalLowerBound: 0
        ScalingAdjustment: 1
  HighQueueAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 1
      Statistic: Sum
      Threshold: 5
      AlarmDescription: 'Alarm if queue length is higher than 5.'
      Period: 300
      AlarmActions:
      - !Ref ScalingUpPolicy
      Namespace: 'AWS/SQS'
      Dimensions:
      - Name: QueueName
        Value: !Sub '${SQSQueue.QueueName}'
      ComparisonOperator: GreaterThanThreshold
      MetricName: ApproximateNumberOfMessagesVisible
  ScalingDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: 'ChangeInCapacity'
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: 'StepScaling'
      MetricAggregationType: 'Average'
      EstimatedInstanceWarmup: 60
      StepAdjustments:
      - MetricIntervalUpperBound: 0
        ScalingAdjustment: -1
  LowQueueAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 1
      Statistic: Sum
      Threshold: 5
      AlarmDescription: 'Alarm if queue length is lower than 5.'
      Period: 300
      AlarmActions:
      - !Ref ScalingDownPolicy
      Namespace: 'AWS/SQS'
      Dimensions:
      - Name: QueueName
        Value: !Sub '${SQSQueue.QueueName}'
      ComparisonOperator: LessThanThreshold
      MetricName: ApproximateNumberOfMessagesVisible
  LoadTestServer:
    Type: 'AWS::EC2::Instance'
    DependsOn: VPCGatewayAttachment
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref IamInstanceProfile
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          for i in `seq 1 25`;
          do
            aws sqs send-message --queue-url ${SQSQueue} --message-body "{\"id\": \"$i.www.google.com\", \"url\": \"http://www.google.com\"}" --region ${AWS::Region}
            aws sqs send-message --queue-url ${SQSQueue} --message-body "{\"id\": \"$i.www.youtube.com\", \"url\": \"http://www.youtube.com\"}" --region ${AWS::Region}
            aws sqs send-message --queue-url ${SQSQueue} --message-body "{\"id\": \"$i.www.amazon.com\", \"url\": \"http://www.amazon.com\"}" --region ${AWS::Region}
            aws sqs send-message --queue-url ${SQSQueue} --message-body "{\"id\": \"$i.www.twitter.com\", \"url\": \"http://www.twitter.com\"}" --region ${AWS::Region}
            aws sqs send-message --queue-url ${SQSQueue} --message-body "{\"id\": \"$i.www.linkedin.com\", \"url\": \"http://www.linkedin.com\"}" --region ${AWS::Region}
            aws sqs send-message --queue-url ${SQSQueue} --message-body "{\"id\": \"$i.www.ebay.com\", \"url\": \"http://www.ebay.com\"}" --region ${AWS::Region}
            aws sqs send-message --queue-url ${SQSQueue} --message-body "{\"id\": \"$i.www.instagram.com\", \"url\": \"http://www.instagram.com\"}" --region ${AWS::Region}
            aws sqs send-message --queue-url ${SQSQueue} --message-body "{\"id\": \"$i.www.reddit.com\", \"url\": \"http://www.reddit.com\"}" --region ${AWS::Region}
            aws sqs send-message --queue-url ${SQSQueue} --message-body "{\"id\": \"$i.www.pinterest.com\", \"url\": \"http://www.pinterest.com\"}" --region ${AWS::Region}
            aws sqs send-message --queue-url ${SQSQueue} --message-body "{\"id\": \"$i.www.wordpress.com\", \"url\": \"http://www.wordpress.com\"}" --region ${AWS::Region}
          done
      Tags:
      - Key: Name
        Value: 'url2png-loadtest'
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet:
        - !Ref SecurityGroup
        SubnetId: !Ref SubnetA
