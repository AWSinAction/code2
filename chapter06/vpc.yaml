---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS in Action: chapter 6 (VPC)'
Parameters:
  KeyName:
    Description: 'Key Pair name'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: mykey
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-2ed19c41'
    'eu-west-3':
      AMI: 'ami-c8a017b5'
    'eu-west-2':
      AMI: 'ami-e3051987'
    'eu-west-1':
      AMI: 'ami-760aaa0f'
    'ap-northeast-2':
      AMI: 'ami-fc862292'
    'ap-northeast-1':
      AMI: 'ami-2803ac4e'
    'sa-east-1':
      AMI: 'ami-1678037a'
    'ca-central-1':
      AMI: 'ami-ef3b838b'
    'ap-southeast-1':
      AMI: 'ami-dd7935be'
    'ap-southeast-2':
      AMI: 'ami-1a668878'
    'eu-central-1':
      AMI: 'ami-e28d098d'
    'us-east-1':
      AMI: 'ami-6057e21a'
    'us-east-2':
      AMI: 'ami-aa1b34cf'
    'us-west-1':
      AMI: 'ami-1a033c7a'
    'us-west-2':
      AMI: 'ami-32d8124a'
Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allowing all incoming and outgoing traffic.'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: '-1'
        FromPort: -1
        ToPort: -1
        CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: -1
        ToPort: -1
        CidrIp: '0.0.0.0/0'
      Tags:
      - Key: Name
        Value: 'AWS in Action: chapter 6 (VPC)'
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: 'AWS in Action: chapter 6 (VPC)'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublicNAT:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.0.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public NAT'
  RouteTablePublicNAT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicNAT:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicNAT
      RouteTableId: !Ref RouteTablePublicNAT
  RoutePublicNATToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicNAT
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicNAT:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicNAT:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicNAT
      NetworkAclId: !Ref NetworkAclPublicNAT
  NetworkAclEntryInPublicNATHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryInPublicNATHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryInPublicNATEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicNATHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicNATHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicNATEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
  SubnetPublicBastionHost:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.1.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public Bastion Host'
  RouteTablePublicBastionHost:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicBastionHost:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicBastionHost
      RouteTableId: !Ref RouteTablePublicBastionHost
  RoutePublicBastionHostToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicBastionHost
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicBastionHost:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicBastionHost:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicBastionHost
      NetworkAclId: !Ref NetworkAclPublicBastionHost
  NetworkAclEntryInPublicBastionHostSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPublicBastionHostEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryOutPublicBastionHostSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryOutPublicBastionHostEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicBastionHost
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
  SubnetPublicVarnishProxy:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public Varnish Proxy'
  RouteTablePublicVarnishProxy:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicVarnishProxy:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicVarnishProxy
      RouteTableId: !Ref RouteTablePublicVarnishProxy
  RoutePublicVarnishProxyToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicVarnishProxy
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicVarnishProxy:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicVarnishProxy:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicVarnishProxy
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
  NetworkAclEntryInPublicVarnishProxySSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: 'allow'
      Egress: false
      CidrBlock: 10.0.1.0/24
  NetworkAclEntryInPublicVarnishProxyHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPublicVarnishProxyEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicVarnishProxyHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicVarnishProxyHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicVarnishProxyEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnishProxy
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
  SubnetPrivateApacheWebserver:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.3.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private Apache Webserver'
  RouteTablePrivateApacheWebserver:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPrivateApacheWebserver:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivateApacheWebserver
      RouteTableId: !Ref RouteTablePrivateApacheWebserver
  RoutePrivateApacheWebserverToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivateApacheWebserver
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
  NetworkAclPrivateApacheWebserver:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPrivateApacheWebserver:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivateApacheWebserver
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
  NetworkAclEntryInPrivateApacheWebserverSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: 'allow'
      Egress: false
      CidrBlock: 10.0.1.0/24
  NetworkAclEntryInPrivateApacheWebserverHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '10.0.2.0/24'
  NetworkAclEntryInPrivateApacheWebserverEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateApacheWebserverHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateApacheWebserverHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: 110
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateApacheWebserverEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApacheWebserver
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '10.0.0.0/16'
  EIPNatGateway:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: 'vpc'
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIPNatGateway.AllocationId'
      SubnetId: !Ref SubnetPublicNAT
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        SubnetId: !Ref SubnetPublicBastionHost
        DeviceIndex: '0'
        GroupSet:
        - !Ref SecurityGroup
      Tags:
      - Key: Name
        Value: 'Bastion Host'
    DependsOn: VPCGatewayAttachment
  VarnishProxy:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        SubnetId: !Ref SubnetPublicVarnishProxy
        DeviceIndex: '0'
        GroupSet:
        - !Ref SecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          bash -ex << "TRY"
            yum -y install varnish-3.0.7
            echo "backend default {" > /etc/varnish/default.vcl
            echo "  .host = \"${ApacheWebserver.PrivateIp}\";" >> /etc/varnish/default.vcl
            echo "  .port = \"80\";" >> /etc/varnish/default.vcl
            echo "}" >> /etc/varnish/default.vcl
            sed -i.bak "s/^VARNISH_LISTEN_PORT=.*/VARNISH_LISTEN_PORT=80/" /etc/sysconfig/varnish
            service varnish start
          TRY
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource VarnishProxy --region ${AWS::Region}
      Tags:
      - Key: Name
        Value: 'Varnish Proxy'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    DependsOn: VPCGatewayAttachment
  ApacheWebserver:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: false
        DeleteOnTermination: true
        SubnetId: !Ref SubnetPrivateApacheWebserver
        DeviceIndex: '0'
        GroupSet:
        - !Ref SecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          bash -ex << "TRY"
            yum -y install httpd
            service httpd start
          TRY
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ApacheWebserver --region ${AWS::Region}
      Tags:
      - Key: Name
        Value: 'Apache Webserver'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    DependsOn: RoutePrivateApacheWebserverToInternet
Outputs:
  BastionHostPublicName:
    Value: !Sub ${BastionHost.PublicDnsName}
    Description: 'Public Name of Bastion Host to connect via SSH as user ec2-user.'
  VarnishProxyPublicName:
    Value: !Sub ${VarnishProxy.PublicDnsName}
    Description: 'Public Name of Varnish Proxy handling incoming HTTP requests.'
  VarnishProxyPrivateIp:
    Value: !Sub ${VarnishProxy.PrivateIp}
    Description: 'Private IP of Varnish Proxy to connect via SSH from Bastion Host.'
  ApacheWebserverPrivateIp:
    Value: !Sub ${ApacheWebserver.PrivateIp}
    Description: 'Private IP of Apache Webserver to connect via SSH from Bastion Host.'
