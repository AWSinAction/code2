---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS in Action: chapter 6 (VPC)'
Parameters:
  KeyName:
    Description: 'Key Pair name'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: mykey
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-d7abd1b8'
    'eu-west-2':
      AMI: 'ami-489f8e2c'
    'eu-west-1':
      AMI: 'ami-ebd02392'
    'ap-northeast-2':
      AMI: 'ami-8663bae8'
    'ap-northeast-1':
      AMI: 'ami-4af5022c'
    'sa-east-1':
      AMI: 'ami-d27203be'
    'ca-central-1':
      AMI: 'ami-5ac17f3e'
    'ap-southeast-1':
      AMI: 'ami-fdb8229e'
    'ap-southeast-2':
      AMI: 'ami-30041c53'
    'eu-central-1':
      AMI: 'ami-657bd20a'
    'us-east-1':
      AMI: 'ami-4fffc834'
    'us-east-2':
      AMI: 'ami-ea87a78f'
    'us-west-1':
      AMI: 'ami-3a674d5a'
    'us-west-2':
      AMI: 'ami-aa5ebdd2'
Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'My security group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: '0.0.0.0/0'
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: 'true'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublicNAT:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.0.0/24'
      VpcId: !Ref VPC
  RouteTablePublicNAT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicNAT:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicNAT
      RouteTableId: !Ref RouteTablePublicNAT
  RoutePublicNATToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicNAT
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicNAT:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicNAT:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicNAT
      NetworkAclId: !Ref NetworkAclPublicNAT
  NetworkAclEntryInPublicNATHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryInPublicNATHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryInPublicNATEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicNATHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicNATHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicNATEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  SubnetPublicSSHBastion:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.1.0/24'
      VpcId: !Ref VPC
  RouteTablePublicSSHBastion:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicSSHBastion:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicSSHBastion
      RouteTableId: !Ref RouteTablePublicSSHBastion
  RoutePublicSSHBastionToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicSSHBastion
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicSSHBastion:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicSSHBastion:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicSSHBastion
      NetworkAclId: !Ref NetworkAclPublicSSHBastion
  NetworkAclEntryInPublicSSHBastionSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicSSHBastion
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPublicSSHBastionEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicSSHBastion
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryOutPublicSSHBastionSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicSSHBastion
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryOutPublicSSHBastionEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicSSHBastion
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  SubnetPublicVarnish:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref VPC
  RouteTablePublicVarnish:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicVarnish:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicVarnish
      RouteTableId: !Ref RouteTablePublicVarnish
  RoutePublicVarnishToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicVarnish
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicVarnish:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicVarnish:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicVarnish
      NetworkAclId: !Ref NetworkAclPublicVarnish
  NetworkAclEntryInPublicVarnishSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnish
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: 10.0.1.0/24
  NetworkAclEntryInPublicVarnishHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnish
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPublicVarnishEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnish
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicVarnishHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnish
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicVarnishHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnish
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicVarnishEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicVarnish
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  SubnetPrivateApache:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.3.0/24'
      VpcId: !Ref VPC
  RouteTablePrivateApache:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPrivateApache:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivateApache
      RouteTableId: !Ref RouteTablePrivateApache
  RoutePrivateApacheToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivateApache
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
  NetworkAclPrivateApache:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPrivateApache:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivateApache
      NetworkAclId: !Ref NetworkAclPrivateApache
  NetworkAclEntryInPrivateApacheSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApache
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: 10.0.1.0/24
  NetworkAclEntryInPrivateApacheHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApache
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.2.0/24'
  NetworkAclEntryInPrivateApacheEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApache
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateApacheHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApache
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateApacheHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApache
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateApacheEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateApache
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '10.0.0.0/16'
  EIPNatGateway:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: 'vpc'
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIPNatGateway.AllocationId'
      SubnetId: !Ref SubnetPublicNAT
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        SubnetId: !Ref SubnetPublicSSHBastion
        DeviceIndex: '0'
        GroupSet:
        - !Ref SecurityGroup
    DependsOn: VPCGatewayAttachment
  VarnishServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        SubnetId: !Ref SubnetPublicVarnish
        DeviceIndex: '0'
        GroupSet:
        - !Ref SecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          yum -y install varnish-3.0.7
          cat > /etc/varnish/default.vcl << EOF
          backend default {
            .host = "${ApacheServer.PrivateIp}";
            .port = "80";
          }
          EOF
          sed -i.bak \"s/^VARNISH_LISTEN_PORT=.*/VARNISH_LISTEN_PORT=8ysconfig/varnish
          service varnish start
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource VarnishServer --region ${AWS::Region} 
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    DependsOn: VPCGatewayAttachment
  ApacheServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'false'
        DeleteOnTermination: 'true'
        SubnetId: !Ref SubnetPrivateApache
        DeviceIndex: '0'
        GroupSet:
        - !Ref SecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          yum -y install httpd
          service httpd start
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource ApacheServer --region ${AWS::Region} 
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    DependsOn: RoutePrivateApacheToInternet
Outputs:
  BastionHostPublicName:
    Value: !Sub ${BastionHost.PublicDnsName}
    Description: connect via SSH as user ec2-user
  VarnishServerPublicName:
    Value: !Sub ${VarnishServer.PublicDnsName}
    Description: handles HTTP requests
  VarnishServerPrivateIp:
    Value: !Sub ${VarnishServer.PrivateIp}
    Description: connect via SSH from bastion host
  ApacheServerPrivateIp:
    Value: !Sub ${ApacheServer.PrivateIp}
    Description: connect via SSH from bastion host
